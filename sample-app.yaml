AWSTemplateFormatVersion: '2010-09-09'
Description: VPC and subnets as base for an ECS cluster
Parameters:
  EnvironmentName:
    Type: String
    Default: ecs-package

  
Resources:
  taskdefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}-td
      Family: !Join 
        - ''
        - - !Ref 'AWS::StackName'
         # - '-ecs-demo-app'
      ContainerDefinitions:
        - Name: simple-app 
          Cpu: '10'
          Essential: 'true'
          Image: 'httpd:2.4'
          Memory: '300'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              #awslogs-stream-prefix: ecs-demo-app
          MountPoints:
            - ContainerPath: /usr/local/apache2/htdocs
              SourceVolume: my-vol
          PortMappings:
            - ContainerPort: 80
        - Name: busybox
          Cpu: 10
          Command:
            - >-
              /bin/sh -c "while true; do echo '>html< >head< >title<Amazon ECS
              Sample App>/title< >style<body {margin-top: 40px;
              background-color: #333;} >/style< >/head<>body< >div
              style=color:white;text-align:center< >h1<Amazon ECS Sample
              App>/h1< >h2<Congratulations!>/h2< >p<Your application is now
              running on a container in Amazon ECS.>/p<' < top; /bin/date < date
              ; echo '>/div<>/body<>/html<' < bottom; cat top date bottom <
              /usr/local/apache2/htdocs/index.html ; sleep 1; done"
          EntryPoint:
            - sh
            - '-c'
          Essential: false
          Image: busybox
          Memory: 200
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs-demo-app
          VolumesFrom:
            - SourceContainer: simple-app
      Volumes:
        - Name: my-vol
  ECSALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: ECSALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'      
      Subnets:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2
        - !ImportValue PublicSubnet3
                             
      SecurityGroups:
        - !ImportValue EcsSecurityGroup
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG
      LoadBalancerArn: !Ref ECSALB
      Port: '80'
      Protocol: HTTP
  ECSALBListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    DependsOn: ALBListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref ALBListener
      Priority: 1
  ECSTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        !ImportValue VPC
  service:
    Type: 'AWS::ECS::Service'
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-service
      Cluster: !ImportValue ECSCluster
      DesiredCount: '2'
      LoadBalancers:
        - ContainerName: simple-app
          ContainerPort: '80'
          TargetGroupArn: !Ref ECSTG
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref taskdefinition
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}-service
  ECSServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'ec2:Describe*'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                Resource: '*'